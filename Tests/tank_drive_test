import time
from time import sleep
import threading
import evdev
from evdev import InputDevice, ecodes
from roboclaw_3 import Roboclaw

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 115200)
roboclaw.Open()
address = 0x80  # Roboclaw address

# Joystick axis mappings
AXIS_CODES = {'LEFT_Y': ecodes.ABS_Y, 'RIGHT_Y': ecodes.ABS_RY}
joystick_positions = {'LEFT_Y': 128, 'RIGHT_Y': 128}

# Locate the PS4 controller


def find_ps4_controller():
    for path in evdev.list_devices():
        device = InputDevice(path)
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found! Ensure it's connected.")


# Initialize controller
controller = find_ps4_controller()
controller.grab()  # Ensure exclusive access
print(f"Connected to {controller.name} at {controller.path}")

try:
    print("Reading joystick positions. Move the joysticks to see the output.")

    for event in controller.read_loop():
        if event.type == ecodes.EV_ABS and event.code in AXIS_CODES.values():
            joystick_positions['LEFT_Y'] = event.value if event.code == ecodes.ABS_Y else joystick_positions['LEFT_Y']
            joystick_positions['RIGHT_Y'] = event.value if event.code == ecodes.ABS_RY else joystick_positions['RIGHT_Y']

            left_speed = max(0, joystick_positions['LEFT_Y'] - 128)
            # roboclaw.ForwardM1(address, left_speed)

            print(
                f"Left Y: {joystick_positions['LEFT_Y']} | Right Y: {joystick_positions['RIGHT_Y']}")

            time.sleep(0.1)

except KeyboardInterrupt:
    roboclaw.ForwardM1(address, 0)
    roboclaw.ForwardM2(address, 0)
    print("\nExiting...")
