import evdev
from evdev import InputDevice, ecodes
import time
import threading
from roboclaw_3 import Roboclaw

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 460800)
roboclaw.Open()
address = 0x80  # Roboclaw address

# Joystick axis mappings
AXIS_CODES = {'LEFT_Y': ecodes.ABS_Y, 'RIGHT_Y': ecodes.ABS_RY}

# Shared variable for joystick position
joystick_positions = {'LEFT_Y': 128, 'RIGHT_Y': 128}

lock = threading.Lock()  # Lock to prevent overlapping motor commands
motor_busy = False  # Flag to track if motor thread is running

# Locate the PS4 controller


def find_ps4_controller():
    for path in evdev.list_devices():
        device = InputDevice(path)
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found! Ensure it's connected.")


# Initialize controller
controller = find_ps4_controller()
controller.grab()  # Ensure exclusive access
print(f"Connected to {controller.name} at {controller.path}")

# Function to send motor commands in a side thread


def send_motor_command(left_speed):
    global motor_busy
    try:
        with lock:
            motor_busy = True
            roboclaw.ForwardM1(address, left_speed)
            print(f"Sent Speed: {left_speed}")
    except Exception as e:
        print(f"Error sending motor command: {e}")
    finally:
        motor_busy = False  # Unlock after sending command

# Function to continuously read joystick positions


def poll_joystick():
    global motor_busy
    print("Starting joystick polling thread.")

    while True:
        event = controller.read_one()  # âœ… Non-blocking joystick read
        if event and event.type == ecodes.EV_ABS and event.code in AXIS_CODES.values():
            with lock:
                if event.code == ecodes.ABS_Y:
                    joystick_positions['LEFT_Y'] = event.value
                    # Real-time updates
                    print(f"Joystick Y: {joystick_positions['LEFT_Y']}")

                left_speed = max(
                    0, min(127, 128 - joystick_positions['LEFT_Y']))

            # Try to send the motor command in a separate thread
            if not motor_busy:
                motor_thread = threading.Thread(
                    target=send_motor_command, args=(left_speed,))
                motor_thread.start()
            else:
                print("Motor thread busy, skipping update.")


# Start the main joystick polling thread
joystick_thread = threading.Thread(target=poll_joystick, daemon=True)
joystick_thread.start()

# Keep the main thread running
try:
    while True:
        time.sleep(0.01)  # Prevents main thread from exiting
except KeyboardInterrupt:
    roboclaw.ForwardM1(address, 0)
    roboclaw.ForwardM2(address, 0)
    print("\nExiting...")
