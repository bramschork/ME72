'''
from evdev import InputDevice, ecodes
Joystick y axis. Home position is 128. Joystick down is 0, joystick up is 256
Roboclaw takes a power input from 0 to 127
'''


import threading
from roboclaw_3 import Roboclaw
from time import sleep
import evdev
from evdev import InputDevice, categorize, ecodes


# Addresses for the two Roboclaws
controller_address = 0x80  # 128 in hex

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 115200)
roboclaw.Open()

# Axis codes for left and right joysticks
AXIS_CODES = {
    'LEFT_Y': ecodes.ABS_Y,
    'RIGHT_Y': ecodes.ABS_RY,
}

# Initialize joystick positions
joystick_positions = {
    'LEFT_Y': 128,  # Neutral position
    'RIGHT_Y': 128,  # Neutral position
}

# Locate the controller


def find_ps4_controller():
    devices = [InputDevice(path) for path in evdev.list_devices()]
    for device in devices:
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found! Ensure it's connected.")


# Initialize controller
controller = find_ps4_controller()
print(f"Connected to {controller.name} at {controller.path}")


def move_motor(motor, address, speed, motor_num):
    """Runs motor movement in a separate thread."""
    speed = max(0, min(127, speed))  # Ensure speed is within 0-127 range
    if motor_num == 1 and speed > 10:
        motor.ForwardM1(address, 10)  # speed
    elif motor_num == 2 and speed > 10:
        motor.ForwardM2(address, 10)


try:
    print("JOYSTICKS HOT")
    for event in controller.read_loop():
        if event.type == ecodes.EV_ABS:

            # Joystick Event
            if event.code in AXIS_CODES.values():
                for axis_name, axis_code in AXIS_CODES.items():
                    if event.code == axis_code:
                        # Update joystick position
                        joystick_positions[axis_name] = event.value

                        left_speed = joystick_positions['LEFT_Y'] - 128
                        right_speed = joystick_positions['RIGHT_Y'] - 128

                        if left_speed > 128:
                            roboclaw.ForwardM1(controller_address, left_speed)
                        else:
                            roboclaw.ForwardM1(controller_address, 0)
                        if right_speed > 128:
                            roboclaw.ForwardM2(controller_address, right_speed)
                        else:
                            roboclaw.ForwardM2(controller_address, 0)
                        print(f'LEFT: {left_speed} | RIGHT {right_speed}')


except KeyboardInterrupt:
    # Stop motors on exit
    roboclaw.ForwardM1(controller_address, 0)
    roboclaw.ForwardM2(controller_address, 0)
    print("\nExiting...")
