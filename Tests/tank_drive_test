import evdev
from evdev import InputDevice, ecodes
import time
import threading
from roboclaw_3 import Roboclaw

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 460800)
roboclaw.Open()
address = 0x80  # Roboclaw address

# Joystick axis mappings
AXIS_CODES = {'LEFT_Y': ecodes.ABS_Y, 'RIGHT_Y': ecodes.ABS_RY}

# Shared variable for joystick position
joystick_positions = {'LEFT_Y': 128, 'RIGHT_Y': 128}

lock = threading.Lock()  # Lock to prevent overlapping motor commands

# Locate the PS4 controller


def find_ps4_controller():
    for path in evdev.list_devices():
        device = InputDevice(path)
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found! Ensure it's connected.")

# Function to send motor commands in a side thread


def send_motor_command(left_speed):
    try:
        with lock:
            roboclaw.ForwardM1(address, left_speed)
            print(f"Sent Speed: {left_speed}")
    except Exception as e:
        print(f"Error sending motor command: {e}")


# Function to continuously read joystick positions


def poll_joystick(left_speed, controller):
    event = controller.read_one()
    if event.type == ecodes.EV_ABS and event.code in AXIS_CODES.values():
        with lock:
            if event.code == ecodes.ABS_Y:
                joystick_positions['LEFT_Y'] = event.value
                left_speed = 128 - joystick_positions['LEFT_Y']

            else:
                print("Motor thread busy, skipping update.")


def main():
    # Daemon - killed when over
    left_speed = 0
    # motor_thread = threading.Thread(
    #     target=send_motor_command, daemon=True, args=(left_speed))
    # motor_thread.start()

    # Initialize controller
    controller = find_ps4_controller()
    controller.grab()  # Ensure exclusive access
    print(f"Connected to {controller.name} at {controller.path}")

    joystick_thread = threading.Thread(
        target=poll_joystick, daemon=True, args=(left_speed, controller))
    joystick_thread.start()

    try:
        # poll_joystick(left_speed)
        send_motor_command(left_speed)
    except KeyboardInterrupt:
        roboclaw.ForwardM1(address, 0)
        roboclaw.ForwardM2(address, 0)
        print("\nExiting...")


while True:
    main()
