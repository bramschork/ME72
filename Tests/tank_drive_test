import time
from roboclaw_3 import Roboclaw
import evdev
from evdev import InputDevice, ecodes

# Addresses for the Roboclaw motor controller
controller_address = 0x80  # 128 in hex

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 115200)
roboclaw.Open()

# Axis codes for left and right joysticks
AXIS_CODES = {
    'LEFT_Y': ecodes.ABS_Y,
    'RIGHT_Y': ecodes.ABS_RY,
}

# Initialize joystick positions
joystick_positions = {
    'LEFT_Y': 128,  # Neutral position
    'RIGHT_Y': 128,  # Neutral position
}

# Locate the controller


def find_ps4_controller():
    devices = [InputDevice(path) for path in evdev.list_devices()]
    for device in devices:
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found! Ensure it's connected.")


# Initialize controller
controller = find_ps4_controller()
print(f"Connected to {controller.name} at {controller.path}")

# Track last update time
last_update_time = time.time()

print("Reading joystick positions. Move the joysticks to control the motors.")

try:
    for event in controller.read_loop():
        if event.type == ecodes.EV_ABS and event.code in AXIS_CODES.values():
            for axis_name, axis_code in AXIS_CODES.items():
                if event.code == axis_code:
                    joystick_positions[axis_name] = event.value

        # Only update motors every 0.1 seconds
        if time.time() - last_update_time >= 0.1:
            last_update_time = time.time()

            # Convert joystick position (0-256) to motor speed (0-127)
            left_speed = max(0, min(127, joystick_positions['LEFT_Y'] // 2))
            right_speed = max(0, min(127, joystick_positions['RIGHT_Y'] // 2))

            # Send motor commands
            roboclaw.ForwardM1(controller_address, left_speed)
            roboclaw.ForwardM2(controller_address, right_speed)

            # Print values in one line
            print(
                f"\rLeft Motor: {left_speed} | Right Motor: {right_speed}", end="")

except KeyboardInterrupt:
    # Stop motors on exit
    roboclaw.ForwardM1(controller_address, 0)
    roboclaw.ForwardM2(controller_address, 0)
    print("\nExiting...")
