import evdev
from evdev import InputDevice, ecodes
from roboclaw_3 import Roboclaw
import asyncio

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 115200)
roboclaw.Open()

# Joystick Axis Mapping
AXIS_CODES = {'LEFT_Y': ecodes.ABS_Y, 'RIGHT_Y': ecodes.ABS_RY}
joystick_positions = {'LEFT_Y': 128, 'RIGHT_Y': 128}

# Locate PS4 Controller


def find_ps4_controller():
    for path in evdev.list_devices():
        device = InputDevice(path)
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found!")


controller = find_ps4_controller()
print(f"Connected to {controller.name} at {controller.path}")


async def poll_joystick():
    print("JOYSTICKS HOT")
    async for event in controller.async_read_loop():
        if event.type == ecodes.EV_ABS and event.code in AXIS_CODES.values():
            for axis_name, axis_code in AXIS_CODES.items():
                if event.code == axis_code:
                    joystick_positions[axis_name] = event.value

        # Convert joystick input to motor speed (Forward only)
        left_speed = (
            joystick_positions['LEFT_Y'] - 128) // 2 if joystick_positions['LEFT_Y'] > 128 else 0
        right_speed = (
            joystick_positions['RIGHT_Y'] - 128) // 2 if joystick_positions['RIGHT_Y'] > 128 else 0

        # Send motor commands
        roboclaw.ForwardM1(0x80, left_speed)
        roboclaw.ForwardM2(0x80, right_speed)

        # Print values
        print(f"\rLEFT: {left_speed} | RIGHT: {right_speed}", end="")

        await asyncio.sleep(0.1)  # Limit update rate

try:
    asyncio.run(poll_joystick())
except KeyboardInterrupt:
    roboclaw.ForwardM1(0x80, 0)
    roboclaw.ForwardM2(0x80, 0)
    print("\nExiting...")
