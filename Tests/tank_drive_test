import evdev
from evdev import InputDevice, ecodes
import time
from roboclaw_3 import Roboclaw

# Initialize Roboclaw
roboclaw = Roboclaw("/dev/ttyS0", 115200)
roboclaw.Open()
address = 0x80  # Roboclaw address

# Joystick axis mappings
AXIS_CODES = {'LEFT_Y': ecodes.ABS_Y, 'RIGHT_Y': ecodes.ABS_RY}

# Initialize joystick positions (centered)
joystick_positions = {'LEFT_Y': 128, 'RIGHT_Y': 128}
# Tracks last sent speeds to avoid redundant updates
last_sent_speeds = {'LEFT_Y': 128, 'RIGHT_Y': 128}

# Locate the PS4 controller


def find_ps4_controller():
    for path in evdev.list_devices():
        device = InputDevice(path)
        if "Wireless Controller" in device.name:
            return device
    raise RuntimeError("PS4 controller not found! Ensure it's connected.")


# Initialize controller
controller = find_ps4_controller()
controller.grab()  # Ensure exclusive access
print(f"Connected to {controller.name} at {controller.path}")

# Function to send motor commands


def send_motor_commands(left_speed):
    roboclaw.ForwardM1(address, left_speed)


try:
    print("Polling joystick. New values will be sent immediately.")

    for event in controller.read_loop():
        if event.type == ecodes.EV_ABS and event.code in AXIS_CODES.values():
            if event.code == ecodes.ABS_Y:
                joystick_positions['LEFT_Y'] = event.value
            elif event.code == ecodes.ABS_RY:
                joystick_positions['RIGHT_Y'] = event.value

            # Convert joystick input to motor speed (Forward only)
            left_speed = max(0, (joystick_positions['LEFT_Y'] - 128))

            # Only send new commands if the speed has changed
            if left_speed != last_sent_speeds['LEFT_Y']:
                send_motor_commands(left_speed)
                # Update last sent speed
                last_sent_speeds['LEFT_Y'] = left_speed

                # Print updates
                print(f"New Left Speed: {left_speed}")

except KeyboardInterrupt:
    roboclaw.ForwardM1(address, 0)
    roboclaw.ForwardM2(address, 0)
    print("\nExiting...")
